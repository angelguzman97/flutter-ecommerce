1. Abrir la app y correrla
2. Descargar la dependencia en la dependencia de desarrollo (dev) "change_app_package_name"
3. Escribir el siguiente comando en la terminal: 
flutter pub run change_app_package_name:main com.angelguzman.myapp --android

---------------------------------
Cambiar icono de la app
1. Descargar la dependencia flutter_launcher_icons
2 Colocar en el .yaml

flutter_launcher_icons:
  android: "launcher_icon"
  ios: true
  image_path: "assets/icon/icon.png"
  min_sdk_android: 21 # android min sdk min:16, default 21

  Cambiar el icono usar el comando
  flutter pub run flutter_launcher_icons

  Crear el splash screen
  1. Descargar la dependencia flutter_native_splash
  2. colocar en el .yaml

  flutter_native_splash:
    color: "#codigo de color"

  3. lanzar comando
  flutter pub run flutter_native_splash:create

  4. Colocar en el main
  FlutterNativeSplash.preserve(widgetsBinding: WidgetsFlutterBinding.ensureInitialized());
await dotenv.load(fileName: '.env');

5. pegar en donde se quiera quitar el loading
FlutterNativeSplash.remove();

6. pegar el siguiente comando para crear la llave
keytool -genkey -v -keystore $env:USERPROFILE\upload-keystore.jks `
        -storetype JKS -keyalg RSA -keysize 2048 -validity 10000 `
        -alias upload
Esto está guardado en la ruta del sistema 

7. Crear el archivo key.propertie en la carpeta de android
y pegar lo siguiente
storePassword=<contraseña generada en el paso 6 sin los pico parentésis>
keyPassword=<contraseña misma>
keyAlias=
storeFile=<colocar la ruta donde se ubica el archivo creado en el paso 6>
cd: /Users/Dell/Desktop/myapp-test.jsk

8. en el archivo android/app/build.gradle
y pegar el siguiente código
ef keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

Pegar antes de android
android {
   ...
}


9. pegar antes del buildTypes lo siguiente
igningConfigs {
        release {
            keyAlias = keystoreProperties['keyAlias']
            keyPassword = keystoreProperties['keyPassword']
            storeFile = keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword = keystoreProperties['storePassword']
        }
    }

10. Reemplazar en el buildTypes 
buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now,
            // so `flutter run --release` works.
            //signingConfig = signingConfigs.debug
            signingConfig = signingConfigs.release
        }
    }

11. colocar en el android/app/src/main/AndroidManifest.xml el permiso de internet
 <uses-permission android:name="android.permission.INTERNET"/> Antes o después de
 <application
        android:label="[project]"
        ...
    </application>

----Crear el bundle AAB
1.- ejecutar el comando
flutter build appbundle

2. se busca en la siguiente ruta
build/app/outputs/bundle/release/app.aab

3. se extrae y se pega en el escritorio

4. Crear cuenta como desarrollador en google play en caso de no tener

